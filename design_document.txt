DESIGN GOALS

* use django
    * the front end this time
    * templates especially
    * it'll be low-rent bc you don't know CSS but kick it HTML2.0 style, it'll be charming at least

* be able to load foods in using an API
    * do it just-in-time and store the foods after, so its a furnishment arrangement, not an always-ask arrangement
    * be able to load recipes in from the API too
    * also accept recipes from user??? how would this even work???
    * without javascript at HTML2.0 speeds, idfk but it'll be fun figuring it out.

* store it in MongoDB just to try it out
    * set up a local mongodb to know how to do that

* should support user profiles with height & weight properties
    * then calculate custom RDAs based on bodyweight


/FOODS APP

pages:

[list of foods] with links to [individual food page]s

* paginated
* url format: /foods/list/$PAGE_NO
* each links to a page in a different app where the food can be added to a user's daily intake

[individual food page], url using FCD ID

/foods/$FDC_ID

* lists nutrition info
* remember to omit optional nutritional fields

[search foods locally] by name which matches food title, links to [individual food page]s

/foods/local_search

[search foods remotely] by name which matches food title, links to [page to import FDC food]s

/foods/remote_search
    * unsure if this will work, what if the FDC API is down or slow?

[import an FDC food]

/foods/import/$FDC_ID


Summary:

[list of foods]
    /foods/list/$PAGE_NO

[individual food page]
    /foods/$FDC_ID

[search foods locally]
    /foods/local_search

[search foods remotely]
    /foods/remote_search

[import an FDC food]
    /foods/import/$FDC_ID

[add food to recipe]
    /foods/$FDC_ID/add


/RECIPES APP

[list of recipes] with links to recipes
    /recipes

[display of recipe]
    /recipes/<id>

[recipe builder - incept page]
    /recipes/builder/new

[recipe builder - add food page]
    /recipes/builder/$ID/add

[recipe builder - mark as done]
    /recipes/builder/$ID/done


RECIPE BUILDER WORKFLOW

* step 1:
    * /recipes/builder/new
    * form with text input for recipe name and [Create] button; submits via GET to /recipes/builder/new
    * which saves a Recipe object to the data store with an empty ingredients list
    * then redirects to /recipes/builder/$MONGODB_ID

* step 2: 
    * /recipes/builder/$MONGODB_ID
    * (a) features a food search option w/usual search tools; submits via GET to /recipes/builder/$MONGODB_ID/ingredients/add?search_query=$ETC
    * (b) features a [Finished] button; form submits via GET to /recipes/builder/$MONGODB_ID/finished
    * (c) features a [Delete] button; form submits via GET to /recipes/builder/$MONGODB_ID/delete

* step 3:
    * /recipes/builder/$MONGODB_ID/add_ingredient/?search_query=$ETC
    * a list of matching foods
    * links click through to /recipes/builder/$MONGODB_ID/add_ingredient/$FDC_ID

* step 4:
    * /recipes/builder/$MONGODB_ID/add_ingredient/$FDC_ID
    * displays nutrition block, has a form with a text input for # of servings and an [Add] button

* step 5:
    * /recipes/builder/$MONGODB_ID/add_ingredient/$FDC_ID/confirm
    * displays modified nutrition block as figured by # of servings, has a [Confirm] button
    * form submits to /recipes/builder/$MONGODB_ID

* step 6:
    * /recipes/builder/$MONGODB_ID/finished
    * outcome of taking step 2c. recipe is finished.

* repeat step 2a, 3, 4 and 5 until all ingredients added, then take step 2b to step 6 to complete

* also needed:
    * /recipes/builder
    * lists all recipes currently under construction with links to each one
    * links to /recipes/builder/$MONGODB_ID


other apps needed:

/users

pages needed

* login page
    /users
    * form submits to /users/auth/
    users.html

* authenatication
    /users/auth/
    * if the password pass authentication (using bcrypt again), redirects to /users/$USER_ID/
    * if the password doesn't authenticate, redirects back to /users/ with ?authenticated=False

* new user page
    /users/new
    * user sets name
    * user sets gender assigned at birth
    * user sets preferred gender (text field)
    * user sets preferred pronouns
    * user sets height
    * user sets weight
    * user sets daily activity
    * user sets weight goals
    * form submits to /users/new, which then redirects to /users/$USER_ID/password/?new=True
    users_new.html

* password-setting page
    * /users/$USER_ID/password/
    * if new=False, acts like a password reset page and requires entering current password
    * asks user to enter new password twice
    * form submits to /users/$USER_ID/ which outputs a message indicating the password has been set
        * new=True vs. new=False
    users_+user_id+_password.html

* profile page
    /users/$USER_ID/
    * basic profile page
    # shows user's name, height, weight, BMI, and calories per day
    * has link to /users/$USER_ID/edit_profile/
    * form: has [Delete] button
        * submits to /users/$USER_ID/delete/confirm/
    users_+user_id+.html

* edit profile page
    /users/$USER_ID/edit_profile/
    * user can set or change name
    * user can set or change height
    * user can set or change weight
    * user can set or change daily activity
    * user can set or change weight goals
    users_+user_id+_edit_profile.html

* delete user confirm page
    /users/$USER_ID/confirm_delete
    * asks the user if they're sure they want to delete their accoutn
    * form: has [Confirm] button
        * submits to /users/delete/
    users_+user_id+_confirm_delete.html

* delete user page
    /users/delete/
    * informs user they've deleted their accout
    users_delete.html



modifications needed now that user tracking exists:

add [Add to Daily Tracking] buttons to food listing and completed-recipes listing
    => form's action lands on /tracker/

TRACKER:

    * /tracker/
        * errors out if no user is logged in
        * lists foods & recipes committed to the tracker today
        * each food has an [Edit Record] button

    * /tracker/$ISODATE/
        * errors out if no user is logged in
        * lists foods committed to the tracker on the specified day
        * each food has an [Edit Record] button
            * link to /tracker/$ISODATE/food_record/$FDC_ID/ OR /tracker/$ISODATE/recipe_record/$MONGODB_ID/, depending
        * errors out if asked to display a day in the future

    * /tracker/$ISODATE/food_record/$FDC_ID/
        * errors out if no user is logged in
        * lists the nutrition facts of the # of servings the record indicate were consumed
        * text input at the bottom which is pre-filled with the # of servings
        * [Update] button to update the record with the new servings #
            * action="/tracker/$ISODATE/food_record/$FDC_ID/"
        * [Delete] button to remove the record from that day's tracker
            * action="/tracker/$ISODATE/"

    * /tracker/$ISODATE/recipe_record/$FDC_ID/
        * errors out if no user is logged in
        * lists the nutrition facts of the # of servings the record indicate were consumed
        * text input at the bottom which is pre-filled with the # of servings
        * [Update] button to update the record with the new servings #
            * action="/tracker/$ISODATE/recipe_record/$FDC_ID/"
        * [Delete] button to remove the record from that day's tracker
            * action="/tracker/$ISODATE/"


TODO:
    somehow modify how dv_perc is calculated to use the user's calories per day instead of 2000
    add option to /foods/ to add a food by manually entering all its information
    replace all instances of fdc_id with an identifier that can be *either* an fdc_id *or* a mongodb_id

    FOODS:

    * /foods/add_food/
        * presents a big table form to enter all 29 values that define a food object
        * serving_units comes in a popup menu
        * [Save] button commits the food to the database
            * action="/foods/add_food/", once the food has a mongodb_id, redirects to "/foods/$MONGODB_ID/"

    * globally retrofit all foods.views functions to handle either fdc_id or nt_id

    * correctly use fdc API search pagination bc currently it's not

    * IMPORTANT: do detective work on how FDC API behaves to detect if the code is picking the wrong serving size for the nutrient data, if they line up in some way and we're picking non-matching items from two different lists
