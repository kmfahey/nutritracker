DESIGN GOALS

* use django
    * the front end this time
    * templates especially
    * it'll be low-rent bc you don't know CSS but kick it HTML2.0 style, it'll be charming at least

* be able to load foods in using an API
    * do it just-in-time and store the foods after, so its a furnishment arrangement, not an always-ask arrangement
    * be able to load recipes in from the API too
    * also accept recipes from user??? how would this even work???
    * without javascript at HTML2.0 speeds, idfk but it'll be fun figuring it out.

* store it in MongoDB just to try it out
    * set up a local mongodb to know how to do that

* should support user profiles with height & weight properties
    * then calculate custom RDAs based on bodyweight


page brainstorming

app: /foods

pages:

[list of foods] with links to [individual food page]s

* paginated
* url format: /foods/list/$PAGE_NO
* each links to a page in a different app where the food can be added to a user's daily intake

[individual food page], url using FCD ID

/foods/$FDC_ID

* lists nutrition info
* remember to omit optional nutritional fields

[page to search foods locally] by name which matches food title, links to [individual food page]s

/foods/local_search

[page to search foods remotely] by name which matches food title, links to [page to import FDC food]s

/foods/remote_search
    * unsure if this will work, what if the FDC API is down or slow?

[page to import an FDC food]

/foods/import/$FDC_ID


SUMMARY:

[list of foods]
    /foods/list/$PAGE_NO

[individual food page]
    /foods/$FDC_ID

[page to search foods locally]
    /foods/local_search

[page to search foods remotely]
    /foods/remote_search

[page to import an FDC food]
    /foods/import/$FDC_ID



other apps needed:

/daily

/recipes


